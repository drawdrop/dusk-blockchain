// This Source Code Form is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this
// file, you can obtain one at https://opensource.org/licenses/MIT.
//
// Copyright (c) DUSK NETWORK. All rights reserved.

package message_test

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/dusk-network/dusk-blockchain/pkg/core/data/ipc/transactions"
	"github.com/dusk-network/dusk-blockchain/pkg/p2p/wire/checksum"
	"github.com/dusk-network/dusk-blockchain/pkg/p2p/wire/message"
	"github.com/dusk-network/dusk-blockchain/pkg/p2p/wire/protocol"
	"github.com/stretchr/testify/assert"
	"golang.org/x/crypto/blake2b"
)

//nolint
func TestWireTransaction(t *testing.T) {
	assert := assert.New(t)

	hexWire := "410c00000000000000000000010000000000000000000000a32b5df60a0100000001000000200c0000712297d8a104139440839888a23dc97c379e2e8e97bb400e52ca78af997f553c04000000000000001cac7e5be3ec7f5561334ee401259801e7af6c9313f450147988bac42e63304ce4367a617e13617d58484adcb37c46238312e9f2075393cb0c37baddfd7e5b591afbad010e552ab3292c54e1e7b350d7aa326f927728212af265b60ee405d915f3b08c561d3aeff5d0a6b925b72740994fa4674d783f27f4c97458573ecf006501000000000000000122ac26240b04b9d8697a7a6d772d41c6af4a9f2a0bc6448c7e6114e8804ac80cc48dcb7e531ccc3b334ae122d4fd40e242e7d8a85fdb82bd4c9e9621a9a60d04a7360f31dc0426451e57b526451a5c3749c131cd38c80f84b235005cef4d1b02b3badf1200e8f833c22807fb59db2aa2ec69b33477ff68a6c5efbd050da26bd0ffffffffffffffff80382f73d39cf357b17072a65d2c17be9f9880324b97101a75c2bfa8b55cb500a74664a6634a404d8fe7c237c0ac343120b7c2a08c07dcb5bfb478b81639c60c33f1f2ac9d3a88bc9502259709df1ec33841644ef18b5bc79a06c95d1d76240f00e40b540200000001000000000000008fcfc11603cb86871527b0ea685928cb15f2328de0a7f078b23ab5da376059060ed3d05d422e85952935b66044045643cc70f423a86064c58e9b6823c902364d01f0f78a0f69e99f97e76dbf3f89f46509d2d1958461585f2086d13f327603bec0a88460350fd1f8771a4d491fba5a47d44febe54727ef8474247d2dfff8c3bd2d87d999c587c5015c02a914c71256bb95bebe01f5d3281330dd1dc3e41583c8007b4c4cc3f5e948e7c18c4473f16c1bff076eb456382ccc0a62cdb76f617d6319992584556a1ae9b82f57984168deedf5479b0656c80a1c996087c82195748b491004000000000000805c937fa988bcf1f54f6d4145590293ab900174dcd6f5738aa87d30e9f219c1435ccd408a22485c1e03d46ea7bf5197a1aef4fd37fd5bcaf12427a5672fce4bd60322951e31b531464226d90cc2c0966034ae015e6e052deb6763d4f21571709235a00d54ebdb22932a2db8473b029fcec7456f9449075b5f429da01c3370d585fd5ee9cd2e8f26a5a2e107a35807caa1bb9ff2159ebda7572024f942635172413d397b549c0606f3a461e843eadd272ebd284fc019a06b67cabbe9074c355aadf6dc750dc7f44b2b8e0908b6767b2f91b54de1017507f2bec6e2c435722a652ad66075d3c8eac187553f5e6f2228eea1c68ea674bad1444d902d25b2aa407ddba2d3435061799a605149fffbbde78ad6472eb30a4b5359443d8d756bd0e97997d9aa49b4e4a075698341482110be841a4d1a1c75da882a0ea9d160124a8f5d445080a6d2e58ccf541a02f4a96c2c2c8e35b4b0b51d9dc2d7cef961464b9f16a1bcdf4fee35a8247e7ced30661bf4ba0410de1adee1b651e09163888df087d8963c0be3988ad419caffd10928fac39b3a4e9df5d7e01df13bb562e530af53e3010d24cddf0a7a7311d51f9a2edf883aad097e03aac2d636ba4c2f7eaa4461c81e2862ef1fd8960d8ae0b5025f471994b77d712109489283de70f44a6ea25437861af0074c12e3fce6668f793529e522d44fb26234e6ef1d26cffcc6dc3925c85702fbc206c8ca9d64d5f1cd53d5cd534efd4b4607e2deb4f14881ae05cc366c20e93d4ea64851238ec9bb058ece171624d763b7f2fd130c5b5f873710b92a5c10d663236afa40db0514903dc327cb10bb1f6de8dc13cd5210ea41f041bf817fbc0ed5cf5b3fbf7921eae5ef2432be0040b9d6d6a41aeee41a56cb2f2cd336c96e742f18a898af57c88e31e775880f195a9ddb929af20d36fa86f05de3e827f204a0dd71737c22f0223b3b346ebe1a334266f4b6cc3d316eaf6ed1b78138846cbe842d10f9f27bb65bbd03fa9e6e3e5e3b7524e289f4f2b0849bc0185bf66986f94977d2b35454f516cfa8b90fd7d622f67919a94beb6cdc415ed792e48a696a1a78b3097d1299376f6ac13ec75beb1f2aa4464050a52c8bbd0b003c602c786bd0f1d1282a624b695414bafc01bd4f1e5209c1bb7932a836c0ea40276e755afb6c29b78f430e23727b328dceb9ae8720b1612303fd3a956fa0351c46abaa789898968567473ab253895755f3c6de943d7beb1f8abfd3c971bfb71e163ef70391f93fadb2d943b939377d2ac86d3c175943755388d3b6bc03597b2b27d6c2ba3c1b135cb57df66d2cdce6a28d88da0c4504e48863d52e7066d876dcfcf6339447a63f0a9f34b38c1d6166f7becc6e8e42e94c56758a3cec36bc566c53699adb0654d13c67b7e77cca5ae3ce30d85945731784bccec11dfe50aec7b2a9da47a970ecfbc640d2deb45ca9b239e8e7a11f3201020000000000000000000000000000000000000000000000000000000000000005000000000000007374616b65ac57e433456b472dc49fd80126168c0ada1dfc973977792d96dc5452f61101667e75300a3a3a74f871e926a65f9f16e3b31127fe8ec70ccd2eb64019ffc70dba49ab6a47b77e502ea5a0c8e8c070001ee31ec411f4683b7c7a19aee7d6be6ed4b479a1feb587ff6e444325ec851324bd1706ae595eb1d011bfc8ca2cee5f0c460ed5a986da19eae80b9736b8a6462117aa398d181b7c091dc070783c9795c21f6a28b58788a7eac57eb51bfcdbe566b838b7e3b4bcaf04f5e38662c98c9af592824e89cd0c69ee0c6b6c32f6831a2895737f940aa42ff22770063295da57588416b8e933124b37000dcf37a5aefd0c9d87ebdf5b21ae1bf8bf688cb5d9a2c4ac318a36d8b0ff798b4ac8cbc9a7bed644141cd7f4a36d11df4110e3f6cc8b1b228d1df1157282531b98dc481b592c1df4ba29d421dcf2aa6c5d5308411045060c8562d8a7392e77203868c09db6e171e587180bd1098d1fdd1a7c76ecb20c83a098165c5811c35dcd40bdce5bf191bee13abfcd0c325bb410bb4d88b0d5c91792a102b0764652e1b3c793f138ecc50b3797a86144a14c2845b5b63d672298e814d61b2b17beefcd576978551f7e96a42d943fc42327bcffda882a3c34e8df90e1eba7126c6de4194b2a2b9f1455bc56dcdc1ac77d4656751079d820119b041b14b08e60463919dd32fc926ee32161e46bc8bf1a4930976e74665b2c8e2b44ebe72a06d4140f5ee7b4dbc424c0ca39bf876fc0bf63b2ae72ec47afe8db07c279cabbdea021e8ce7238dc330c2ec520442854104fe3e0794bbdd0a9a3b85ad8850f23e10fa38c7079dfc821f6b51902da62b4ca7deb62289ad36d5cf48915519193cf332b687fa0ee1afdd367d47832974918662e5816f6eeb30d5e58a11bd744c39984a8e3a22e2b32845d8525a607cf497900b569b2db03c6093b0a6290704e349c95071301164c7d0eacdccea7a037643909bd142eaa9bb9a3a0324b09bf7db1afc6b7059caf946aa6b977b1d0150737b349c9fde68a36d7b123ba9f1b8a2fb1393656dfdb4fd8582d495fde4afd0b66be33dfe2b09a4365843ec528d69d03c40dec5e3637306f58914edc1f50d1695f8437ed74afd564953292b848fb2f1acb28518a1d6047c17448289166964a9958b688ba97863eb0d8d9a0159b36f1968de2775cf082cab27f17f509d1dbf8b810a42e08c5e8588d866a6953693e81b41ddb77f0beee66c58ed428de445f9f444d5ee4ae321d77f4bf095b053e653cb99ed56c6fa81fb7e3ab138e6d09ad45d64388d227cf99f7719e563722ae23168f436c3fc0807251054f90ff71ab1da8d66983fbbec450e6954aaed7836668a9e2d7bb5b20710151c00c725a58b85d42a30aeb6512d4b696aaccaffd30401063f15efeb60a4fd72f7e1086a24c961b161a5cb6bcc92a05f2aed024758a7646a43fda1a8959be7b26273db8d692d9099ba1028cb1c21a0f45bdf5b695b05d7806878ef71fca3cf08b7b29d323aea961cec065a19cb90a33b99880e371c5a6e3f979143bb750b5de539e42e204f62f9ab4b96462c8e44ab4798b183ddd323642590895258767628619d202f89e07a05cd74216857c73031dc8e61544c74d0ce51a7f7f032ce5d85c0e0d938a569e5739724b74dda9eaa411ebec226dc2f99222d2a910567aca1fb4a2ebd7d1357605ef11b62da57f21aca20ff0c878cdb3e45177b7f2a6667bf52df9c4fb1c86bf65fb80e3040000000000000000b3134a0603dbc3be4cd8bcb4925424b88138f561d87a4acc466b93bc0f783e18d05495f0b00c77b1e477f3b625e9ef0e155f4ef89fc1007f8b106b67c6af1dcfeb9404b450aef328a775666518eac1a2156832a16d86712dd261d594270c3d1000000000000000000010a5d4e8000000b8faffff10040000"
	hexTxHash := "0faf44445372c03b6d99cc3d8258b36f7d45b4185c49f4136ee4d93267b59301"

	txHash, err := hex.DecodeString(hexTxHash)
	if err != nil {
		t.Fatalf("Unable to decode hash hex: %v", err)
	}

	wire, err := hex.DecodeString(hexWire)
	if err != nil {
		t.Fatalf("Unable to decode tx hex: %v", err)
	}

	// buffer := bytes.NewBuffer(wire)

	gossip := protocol.NewGossip()
	// frame := gossip.(buffer)

	reader := bytes.NewReader(wire)

	// read message (extract length and magic)
	b, err := gossip.ReadMessage(reader)
	if err != nil {
		t.Fatalf("Cannot extract length and magic: %v", err)
	}
	// extract checksum
	m, cs, err := checksum.Extract(b)
	if err != nil {

		t.Fatalf("error extracting message and cs: %v", err)
		return
	}
	// verify checksum
	if !checksum.Verify(m, cs) {
		t.Fatalf("invalid checksum: %v", err)
		return
	}

	buffer := bytes.NewBuffer(m)

	message, err := message.Unmarshal(buffer, nil)
	if err != nil {
		t.Fatalf("Unable to unmarshal: %v", err)
	}
	tx := message.Payload().(*transactions.Transaction)

	assert.EqualValues(1, tx.Version, "tx Version mismatch")
	assert.EqualValues(transactions.Transfer, tx.TxType, "txType is not TRANSFER")

	decoded, err := tx.Decode()
	if err != nil {
		t.Fatalf("Unable to unmarshal: %v", err)
	}

	assert.EqualValues(10000000000, decoded.Fee.GasLimit, "unexpected GasLimit")
	assert.EqualValues(1, decoded.Fee.GasPrice, "unexpected GasPrice")

	hash, err := decoded.Hash(tx.TxType)
	if err != nil {
		t.Fatalf("Unable to hash transaction: %v", err)
	}

	assert.EqualValues(txHash, hash, "hash mismatch")
}

//nolint
func TestTxHash(t *testing.T) {
	assert := assert.New(t)
	hashingBytesHex := "1cac7e5be3ec7f5561334ee401259801e7af6c9313f450147988bac42e63304ce4367a617e13617d58484adcb37c46238312e9f2075393cb0c37baddfd7e5b591afbad010e552ab3292c54e1e7b350d7aa326f927728212af265b60ee405d915f3b08c561d3aeff5d0a6b925b72740994fa4674d783f27f4c97458573ecf00650122ac26240b04b9d8697a7a6d772d41c6af4a9f2a0bc6448c7e6114e8804ac80cc48dcb7e531ccc3b334ae122d4fd40e242e7d8a85fdb82bd4c9e9621a9a60d04a7360f31dc0426451e57b526451a5c3749c131cd38c80f84b235005cef4d1b02b3badf1200e8f833c22807fb59db2aa2ec69b33477ff68a6c5efbd050da26bd0ffffffffffffffff80382f73d39cf357b17072a65d2c17be9f9880324b97101a75c2bfa8b55cb500a74664a6634a404d8fe7c237c0ac343120b7c2a08c07dcb5bfb478b81639c60c33f1f2ac9d3a88bc9502259709df1ec33841644ef18b5bc79a06c95d1d76240f712297d8a104139440839888a23dc97c379e2e8e97bb400e52ca78af997f553c00e40b540200000001000000000000008fcfc11603cb86871527b0ea685928cb15f2328de0a7f078b23ab5da376059060ed3d05d422e85952935b66044045643cc70f423a86064c58e9b6823c902364df0f78a0f69e99f97e76dbf3f89f46509d2d1958461585f2086d13f327603bec0a88460350fd1f8771a4d491fba5a47d44febe54727ef8474247d2dfff8c3bd2d87d999c587c5015c02a914c71256bb95bebe01f5d3281330dd1dc3e41583c8007b4c4cc3f5e948e7c18c4473f16c1bff076eb456382ccc0a62cdb76f617d6319992584556a1ae9b82f57984168deedf5479b0656c80a1c996087c82195748b4902000000000000000000000000000000000000000000000000000000000000007374616b658607862f6368b85e9a4635eb0d5e17e515c82a199d11d6845ac9920ecd3d68ee3b94d1c8d7217df6dc6c49f7ea0792db89e70e82a5641eb78a4be06591deff8dfe1bfdf06a1d627e5849ccca03f17f1155f9479309bf050322b57291959d0a9d90eb9946a9e9d728c81c3c1c80016205d9d805febee458db5082c827f2a979bc5c86c82ea257d219150964d7d377de54ade8bef77c4988b1616260cc25c04bf516c5e4e25b76d1a4c41940b9f33cf0dd36b3e3255fcf0009c773f4efaf6a985ab912a2c786000c91a1a0a6e534201bfa812bc60ab7f58d00db50fb925afe243c7236678ba905d13a8ec8ca96bff70b93b920a17897fa4ba075bac4e502ff4a6f1d472f483c1be7859152eb26bdcc1ee22d7f7b073cb552654fb52389a09fd60698aabcf77df954261981f01ef6857e9e700f38d2071e2d728fd29a9d5fa496a658cafcdcd3471d3629449d0d9c1e0a0d8c6470f00a4a04d86969781737ff427f3ac271397192f35eff0df20045876b51df34063331fecb678f7dfee661310f97aa5f1f7df5b6039cbd2cb0cf57d77a021675fcf5c03ce5f0779dd45d1b44cad4497ac703d630a2f9422181dfdaa6b3adab186e3c4a0a304ce58eb9bb652b244697dfdb1f345ec567e201584ecb65994049b8c08719cfc563c4f5d74603498fc8b5554cab038439fc8a9c6097a48f415667aa1fe494d3a3cacd57095ca715e0def104f670a082719e379d31045a1ba081e4e5caa17a9b1735e796016e86e01ea65368e21f0ae2424f7a7c9c5949af934d409497a7b8f6d6b4858801c36e59b16e4fe5d2ca66ef852a7d988120c6e042585169e00dffbb39285b7eb063e9e4583833aeea6bd061ad1db2c95fdfe4c7066c9d0d0c090dab74e6f61409e637a999c7fd37ea537f2f8cb2dcc3da5d4c9c096e579ec2f8157c691a9046c1cb308861a27be4607099c2c4bba9f1a67b6617831100a934f9381ad3fb554a5c37504785066932e9a0b8f45030784d8647fcf84c3711e7fc0f7c0005d4cbb994df7cc794f0970252359ec2f501c2caa3ffa4ffd31cb36f72221c7910e5dce2ae2d879e610c683ecc3e17f3419d29f6da0441731b3565fbe6bf00dccdb3b8d7e4a9aed6fdb30aa0e67fadc7d2ff0cfe99840336243a936cf187331fc77f5e9bc436380dda51b0a70e269ef685aaef47cdec0def9e6ec27d58acc4703d370a34e63b79f2973fe4761704b56d84c0611ce51793aa3b4385b0caf1bf47177f2e7bc16716d93370c2f87c9450d642d6b2c8359535cbef1af3f9d6e9ac0a2cee03429c58d71895c4161ef69971a4b4e3f1f72d18b80ef404704ae481e7730fd3412f5db0a0ec41c25ec78df253648d707e826013d061b2498b1ffe0e4059a8b47b4f16a7bfb1aaed5fc099df1f68cdb155c7cdf2ca54e36522fc22b9e29962296e3deb00b9163f0c3e9d7da77dbfb65b4e1dac991b6906168cb1c21a0f45bdf5b695b05d7806878ef71fca3cf08b7b29d323aea961cec065a19cb90a33b99880e371c5a6e3f979143bb750b5de539e42e204f62f9ab4b96462c8e44ab4798b183ddd323642590895258767628619d202f89e07a05cd74216857c73031dc8e61544c74d0ce51a7f7f032ce5d85c0e0d938a569e5739724b74dda9eaa411ebec226dc2f99222d2a910567aca1fb4a2ebd7d1357605ef11b62da57f21aca20ff0c878cdb3e45177b7f2a6667bf52df9c4fb1c86bf65fb80e3040000000000000000b3134a0603dbc3be4cd8bcb4925424b88138f561d87a4acc466b93bc0f783e18d05495f0b00c77b1e477f3b625e9ef0e155f4ef89fc1007f8b106b67c6af1dcfeb9404b450aef328a775666518eac1a2156832a16d86712dd261d594270c3d1000000000000000000010a5d4e8000000b8faffff10040000"
	hashingBytes, err := hex.DecodeString(hashingBytesHex)
	if err != nil {
		t.Fatalf("Unable to decode hash hex: %v", err)
	}
	expectedTxHashHex := "0cb4dede2d43293279139c14fd0df8149aa1b5c2381f30c8853bdf2d56f75608"
	expectedTxHash, err := hex.DecodeString(expectedTxHashHex)
	if err != nil {
		t.Fatalf("Unable to decode expected hash hex: %v", err)
	}

	hasher, err := blake2b.New(32, nil)
	if err != nil {
		t.Fatalf("Unable to create hasher %v", err)
	}
	if _, err := hasher.Write(hashingBytes); err != nil {
		t.Fatalf("Unable to hash %v", err)
	}
	hash := hasher.Sum(nil)
	hash[31] &= 0xf // truncate in the same way as `rusk-abi`

	assert.EqualValues(expectedTxHash, hash, "hash mismatch")
}

//nolint
func TestStakeTransaction(t *testing.T) {
	assert := assert.New(t)

	hexPayload := "712297d8a104139440839888a23dc97c379e2e8e97bb400e52ca78af997f553c04000000000000001cac7e5be3ec7f5561334ee401259801e7af6c9313f450147988bac42e63304ce4367a617e13617d58484adcb37c46238312e9f2075393cb0c37baddfd7e5b591afbad010e552ab3292c54e1e7b350d7aa326f927728212af265b60ee405d915f3b08c561d3aeff5d0a6b925b72740994fa4674d783f27f4c97458573ecf006501000000000000000122ac26240b04b9d8697a7a6d772d41c6af4a9f2a0bc6448c7e6114e8804ac80cc48dcb7e531ccc3b334ae122d4fd40e242e7d8a85fdb82bd4c9e9621a9a60d04a7360f31dc0426451e57b526451a5c3749c131cd38c80f84b235005cef4d1b02b3badf1200e8f833c22807fb59db2aa2ec69b33477ff68a6c5efbd050da26bd0ffffffffffffffff80382f73d39cf357b17072a65d2c17be9f9880324b97101a75c2bfa8b55cb500a74664a6634a404d8fe7c237c0ac343120b7c2a08c07dcb5bfb478b81639c60c33f1f2ac9d3a88bc9502259709df1ec33841644ef18b5bc79a06c95d1d76240f00e40b540200000001000000000000008fcfc11603cb86871527b0ea685928cb15f2328de0a7f078b23ab5da376059060ed3d05d422e85952935b66044045643cc70f423a86064c58e9b6823c902364d01f0f78a0f69e99f97e76dbf3f89f46509d2d1958461585f2086d13f327603bec0a88460350fd1f8771a4d491fba5a47d44febe54727ef8474247d2dfff8c3bd2d87d999c587c5015c02a914c71256bb95bebe01f5d3281330dd1dc3e41583c8007b4c4cc3f5e948e7c18c4473f16c1bff076eb456382ccc0a62cdb76f617d6319992584556a1ae9b82f57984168deedf5479b0656c80a1c996087c82195748b491004000000000000af6b5d1efb311db017101fd79edbb9966c6fbd6fbd27f823e92b6d10887da1c2adb71ed53c9f1f4373dfda7e8edea940b092190a2e4499cfff63280a0c70fa719d884af0c403263c366f15df83c2a3ead51aed9303dc7f1ff81bb2e90974b1cb8cd768e8435cf51956154881623773be8bc1c55828dbe9b2a018421e5ed7bc0764f168242444baaf9b322fd1751a5418b6935b1d2655c2814ce28b322ddb2fa70800662c4f5b25daf4d1c47127d6d7bafee650429f04e5d1817a087de89b71a088ea1164f91033062e45d2e947141fc3ee8314493559e780a8dfe4a9925ddca6ed4317f8469b9edc5b845268eced4fe18046eeab07cb3ddd49efc301e7f391882bbb9e7bf50654cb1f41b7b6a879c86c939696d73b643473158099851143313387210d679438c4ae5fd7fb85551f9c8399f79021c42539d945c8ad540b449198a8d12012d75412eef2e0e3ddbb345125ad27f26481408497179461c3f05583200571efc2a2e377b62025b5b3f139df967d3d0fe6e8efa7cdbbc92de47be0e3b591491fbcad893070e1faa19cac602bae9fe2ca6684822195be34c7499194d9535407c00942181cdfe0e5abcd018148fd91a314775d5ff87208c248b80db2cf58403e7f67969f24873516b49ab632315b8d111b3a3ee6a8fff1bf981463a4d32badbcb36045e3da5e0c5047e7f11a0ae80fc199e9831f53f29d3952ee4e97596b5df87f346e1df474720956afcdf079f66aeb1149492e344d2449aec768fd148c8c97ca074fd5d123842cc74cc385a814ffc3f101582952b2d10cd1778cf6342f3cb1f12f4ab3e4b85951c769f753f85578f98b4a358b8082ebb20198d65a63199b34e17285fba6276d01eeff9983b95a0c017054699dff36bd79099d81a48b2171de6f9a809df80487f8f142dbcb2a4d5cc735e4fc5d7c630e3f45567ab706cd5ea725f2d6031f02d3c21581ba6fec3105c26b1da5dc2a0effaedb71ebec18519b5fb55d5b2738183c8ca7fb07d77d22d95bfe56b2dd1d8b9887edb26c7b5c05c4e416d4ba7a2d1b89de92183335ac3a88292767f4b0dff65adad544c34326704a948f8dc2c8955e1f1a3464beeec44bfa12f5317bd0bcc9633fa6ff729882f4d9bc6acfeeaef7dcaaeafbfeae028c1851b7f9bcf5d29faef7dec679be7195e96b47ffe6e67548533e8a85db329df81b8774ded04f1609e8211d8e8a3dc36e555d91aa247ac69186668b4484b6f6aa72f54f7bf727209eeadb90036b36fb0db60338ae04d14e96de97060328b702ee09ed823676e23ee2a84f442acef942207ebce44675959e6c43733ad28edf41e519db33ede658def97d8a15ef0d741280b1d7b47e3c1248eaeac4abfd5c5d94813334af6f9e39355ecc67a175305ae51d2bef840d4a08655aac2f98991c29028f6c54dd586635e89e1740abbabef2f8ce12899c7eb75773f2b6f94aa71fc899ae6901020000000000000000000000000000000000000000000000000000000000000005000000000000007374616b658607862f6368b85e9a4635eb0d5e17e515c82a199d11d6845ac9920ecd3d68ee3b94d1c8d7217df6dc6c49f7ea0792db89e70e82a5641eb78a4be06591deff8dfe1bfdf06a1d627e5849ccca03f17f1155f9479309bf050322b57291959d0a9d90eb9946a9e9d728c81c3c1c80016205d9d805febee458db5082c827f2a979bc5c86c82ea257d219150964d7d377de54ade8bef77c4988b1616260cc25c04bf516c5e4e25b76d1a4c41940b9f33cf0dd36b3e3255fcf0009c773f4efaf6a985ab912a2c786000c91a1a0a6e534201bfa812bc60ab7f58d00db50fb925afe243c7236678ba905d13a8ec8ca96bff70b93b920a17897fa4ba075bac4e502ff4a6f1d472f483c1be7859152eb26bdcc1ee22d7f7b073cb552654fb52389a09fd60698aabcf77df954261981f01ef6857e9e700f38d2071e2d728fd29a9d5fa496a658cafcdcd3471d3629449d0d9c1e0a0d8c6470f00a4a04d86969781737ff427f3ac271397192f35eff0df20045876b51df34063331fecb678f7dfee661310f97aa5f1f7df5b6039cbd2cb0cf57d77a021675fcf5c03ce5f0779dd45d1b44cad4497ac703d630a2f9422181dfdaa6b3adab186e3c4a0a304ce58eb9bb652b244697dfdb1f345ec567e201584ecb65994049b8c08719cfc563c4f5d74603498fc8b5554cab038439fc8a9c6097a48f415667aa1fe494d3a3cacd57095ca715e0def104f670a082719e379d31045a1ba081e4e5caa17a9b1735e796016e86e01ea65368e21f0ae2424f7a7c9c5949af934d409497a7b8f6d6b4858801c36e59b16e4fe5d2ca66ef852a7d988120c6e042585169e00dffbb39285b7eb063e9e4583833aeea6bd061ad1db2c95fdfe4c7066c9d0d0c090dab74e6f61409e637a999c7fd37ea537f2f8cb2dcc3da5d4c9c096e579ec2f8157c691a9046c1cb308861a27be4607099c2c4bba9f1a67b6617831100a934f9381ad3fb554a5c37504785066932e9a0b8f45030784d8647fcf84c3711e7fc0f7c0005d4cbb994df7cc794f0970252359ec2f501c2caa3ffa4ffd31cb36f72221c7910e5dce2ae2d879e610c683ecc3e17f3419d29f6da0441731b3565fbe6bf00dccdb3b8d7e4a9aed6fdb30aa0e67fadc7d2ff0cfe99840336243a936cf187331fc77f5e9bc436380dda51b0a70e269ef685aaef47cdec0def9e6ec27d58acc4703d370a34e63b79f2973fe4761704b56d84c0611ce51793aa3b4385b0caf1bf47177f2e7bc16716d93370c2f87c9450d642d6b2c8359535cbef1af3f9d6e9ac0a2cee03429c58d71895c4161ef69971a4b4e3f1f72d18b80ef404704ae481e7730fd3412f5db0a0ec41c25ec78df253648d707e826013d061b2498b1ffe0e4059a8b47b4f16a7bfb1aaed5fc099df1f68cdb155c7cdf2ca54e36522fc22b9e29962296e3deb00b9163f0c3e9d7da77dbfb65b4e1dac991b6906168cb1c21a0f45bdf5b695b05d7806878ef71fca3cf08b7b29d323aea961cec065a19cb90a33b99880e371c5a6e3f979143bb750b5de539e42e204f62f9ab4b96462c8e44ab4798b183ddd323642590895258767628619d202f89e07a05cd74216857c73031dc8e61544c74d0ce51a7f7f032ce5d85c0e0d938a569e5739724b74dda9eaa411ebec226dc2f99222d2a910567aca1fb4a2ebd7d1357605ef11b62da57f21aca20ff0c878cdb3e45177b7f2a6667bf52df9c4fb1c86bf65fb80e3040000000000000000b3134a0603dbc3be4cd8bcb4925424b88138f561d87a4acc466b93bc0f783e18d05495f0b00c77b1e477f3b625e9ef0e155f4ef89fc1007f8b106b67c6af1dcfeb9404b450aef328a775666518eac1a2156832a16d86712dd261d594270c3d1000000000000000000010a5d4e8000000b8faffff10040000"
	hexTxHash := "0cb4dede2d43293279139c14fd0df8149aa1b5c2381f30c8853bdf2d56f75608"

	txHash, err := hex.DecodeString(hexTxHash)
	if err != nil {
		t.Fatalf("Unable to decode hash hex: %v", err)
	}

	payload, err := hex.DecodeString(hexPayload)
	if err != nil {
		t.Fatalf("Unable to decode tx hex: %v", err)
	}

	txdummy := transactions.NewTransaction()
	txdummy.TxType = 1
	txdummy.Payload.Data = payload

	decoded, err := txdummy.Decode()
	if err != nil {
		t.Fatalf("Unable to decode staking: %v", err)
	}

	assert.NotEqualValues(decoded.Anchor, make([]byte, 32), "Anchor should not be empty")
	assert.NotNil(decoded.Call, "Call should be present")
	assert.NotNil(decoded.Crossover, "Crossover should  be present")
	assert.NotZero(decoded.Fee.GasLimit, "GasLimit should not be 0")
	assert.NotZero(decoded.Fee.GasPrice, "GasPrice should not be 0")
	assert.NotEmpty(decoded.Nullifiers, "Nullifiers should be present")

	assert.EqualValues(transactions.STAKE_CONTRACT_ID, decoded.Call.ContractID, "Contract id invalid")
	assert.EqualValues(transactions.TX_STAKE, decoded.Call.FnName, "FnName id invalid")

	hash, err := decoded.Hash(txdummy.TxType)
	if err != nil {
		t.Fatalf("Unable to calculate hash for staking: %v", err)
	}

	assert.EqualValues(txHash, hash, "hash mismatch for staking")
}
